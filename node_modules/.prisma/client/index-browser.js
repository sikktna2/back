
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  gender: 'gender',
  birthDate: 'birthDate',
  city: 'city',
  profileImage: 'profileImage',
  profileImageLocked: 'profileImageLocked',
  rating: 'rating',
  completedRides: 'completedRides',
  joinDate: 'joinDate',
  genderPreference: 'genderPreference',
  isVerified: 'isVerified',
  isPremium: 'isPremium',
  hasSeenOnboarding: 'hasSeenOnboarding',
  preferredLanguage: 'preferredLanguage',
  darkMode: 'darkMode',
  referralCode: 'referralCode',
  premiumStartDate: 'premiumStartDate',
  premiumEndDate: 'premiumEndDate',
  autoRenew: 'autoRenew',
  hasUsedFreeTrial: 'hasUsedFreeTrial',
  referralsCount: 'referralsCount',
  isEligibleForReward: 'isEligibleForReward',
  currentLat: 'currentLat',
  currentLng: 'currentLng',
  idFrontImageUrl: 'idFrontImageUrl',
  idBackImageUrl: 'idBackImageUrl',
  drivingLicenseUrl: 'drivingLicenseUrl',
  driverLicenseExpiryDate: 'driverLicenseExpiryDate',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  emailVerificationToken: 'emailVerificationToken',
  emailVerificationExpires: 'emailVerificationExpires',
  isEmailVerified: 'isEmailVerified',
  idVerificationStatus: 'idVerificationStatus',
  role: 'role',
  nextFreeRideAt: 'nextFreeRideAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  homeAddress: 'homeAddress',
  homeLat: 'homeLat',
  homeLng: 'homeLng',
  workAddress: 'workAddress',
  workLat: 'workLat',
  workLng: 'workLng'
};

exports.Prisma.CarScalarFieldEnum = {
  id: 'id',
  brand: 'brand',
  model: 'model',
  year: 'year',
  color: 'color',
  plate: 'plate',
  licensePhoto: 'licensePhoto',
  isVerified: 'isVerified',
  licenseExpiryDate: 'licenseExpiryDate',
  verificationStatus: 'verificationStatus',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.CarLicenseHistoryScalarFieldEnum = {
  id: 'id',
  photoUrl: 'photoUrl',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  carId: 'carId'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  origin: 'origin',
  destination: 'destination',
  fromCity: 'fromCity',
  fromSuburb: 'fromSuburb',
  toCity: 'toCity',
  toSuburb: 'toSuburb',
  fromCityNorm: 'fromCityNorm',
  fromSuburbNorm: 'fromSuburbNorm',
  toCityNorm: 'toCityNorm',
  toSuburbNorm: 'toSuburbNorm',
  originLat: 'originLat',
  originLng: 'originLng',
  destinationLat: 'destinationLat',
  destinationLng: 'destinationLng',
  polyline: 'polyline',
  time: 'time',
  seats: 'seats',
  price: 'price',
  receiptPrice: 'receiptPrice',
  isTimeArranged: 'isTimeArranged',
  isRequest: 'isRequest',
  rideType: 'rideType',
  isVerified: 'isVerified',
  status: 'status',
  allowedGender: 'allowedGender',
  startedAt: 'startedAt',
  arrivedAt: 'arrivedAt',
  etaMinutes: 'etaMinutes',
  isAnonymous: 'isAnonymous',
  additionalInfo: 'additionalInfo',
  serviceType: 'serviceType',
  carInfo: 'carInfo',
  renterScreenshotUrl: 'renterScreenshotUrl',
  driverId: 'driverId',
  carId: 'carId',
  createdAt: 'createdAt'
};

exports.Prisma.RideInterestScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  status: 'status',
  screenshot: 'screenshot',
  seatsBooked: 'seatsBooked',
  rideId: 'rideId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  price: 'price',
  status: 'status',
  rideId: 'rideId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ChatMemberScalarFieldEnum = {
  id: 'id',
  hasStarted: 'hasStarted',
  hasEnded: 'hasEnded',
  chatId: 'chatId',
  userId: 'userId',
  bookingId: 'bookingId',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  chatId: 'chatId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  userId: 'userId',
  relatedId: 'relatedId',
  bookingStatus: 'bookingStatus',
  createdAt: 'createdAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  rideId: 'rideId',
  givenById: 'givenById',
  receivedById: 'receivedById',
  createdAt: 'createdAt',
  startOnTime: 'startOnTime',
  arrivalOnTime: 'arrivalOnTime'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  threshold: 'threshold',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  progress: 'progress',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt',
  lostAt: 'lostAt',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  code: 'code',
  referrerId: 'referrerId',
  refereeId: 'refereeId',
  bonusGiven: 'bonusGiven',
  createdAt: 'createdAt'
};

exports.Prisma.AppConfigScalarFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  onTimeStarts: 'onTimeStarts',
  onTimeArrivals: 'onTimeArrivals',
  totalChatMessages: 'totalChatMessages',
  fastResponses: 'fastResponses',
  totalBookingsToAccept: 'totalBookingsToAccept',
  acceptedBookings: 'acceptedBookings',
  totalCancellations: 'totalCancellations',
  totalRidesAsDriver: 'totalRidesAsDriver',
  totalRidesAsPassenger: 'totalRidesAsPassenger',
  completedFreeRidesAsDriver: 'completedFreeRidesAsDriver',
  fastResponseOpportunities: 'fastResponseOpportunities',
  fastResponseSuccesses: 'fastResponseSuccesses'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  comment: 'comment',
  status: 'status',
  rideId: 'rideId',
  reporterId: 'reporterId',
  reportedUserId: 'reportedUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminLastVisitScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  resource: 'resource',
  lastVisitedAt: 'lastVisitedAt'
};

exports.Prisma.SavedRouteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  originAddress: 'originAddress',
  originLat: 'originLat',
  originLng: 'originLng',
  destinationAddress: 'destinationAddress',
  destinationLat: 'destinationLat',
  destinationLng: 'destinationLng',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ScheduledRideScalarFieldEnum = {
  id: 'id',
  origin: 'origin',
  destination: 'destination',
  fromCity: 'fromCity',
  toCity: 'toCity',
  originLat: 'originLat',
  originLng: 'originLng',
  destinationLat: 'destinationLat',
  destinationLng: 'destinationLng',
  seats: 'seats',
  price: 'price',
  scheduleTime: 'scheduleTime',
  daysOfWeek: 'daysOfWeek',
  isActive: 'isActive',
  driverId: 'driverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RideCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  rideId: 'rideId',
  userId: 'userId',
  parentId: 'parentId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  NOT_SUBMITTED: 'NOT_SUBMITTED',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  UPCOMING: 'UPCOMING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.OfferStatus = exports.$Enums.OfferStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Car: 'Car',
  CarLicenseHistory: 'CarLicenseHistory',
  Ride: 'Ride',
  RideInterest: 'RideInterest',
  Booking: 'Booking',
  Offer: 'Offer',
  Chat: 'Chat',
  ChatMember: 'ChatMember',
  Message: 'Message',
  Notification: 'Notification',
  Feedback: 'Feedback',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Referral: 'Referral',
  AppConfig: 'AppConfig',
  UserStats: 'UserStats',
  PromoCode: 'PromoCode',
  Report: 'Report',
  AdminLastVisit: 'AdminLastVisit',
  SavedRoute: 'SavedRoute',
  ScheduledRide: 'ScheduledRide',
  RideComment: 'RideComment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
