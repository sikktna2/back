generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  name                     String
  email                    String             @unique
  phone                    String             @unique
  createdAt                DateTime           @default(now())
  gender                   String?
  isVerified               Boolean            @default(false)
  password                 String
  updatedAt                DateTime           @updatedAt
  id                       String             @id @default(cuid())
  birthDate                DateTime?
  city                     String?
  completedRides           Int                @default(0)
  genderPreference         String             @default("all")
   rideSearchWindowDays    Int                @default(7)
  isPremium                Boolean            @default(false)
  joinDate                 DateTime           @default(now())
  profileImage             String?
  rating                   Float              @default(0)
  currentLat               Float?
  currentLng               Float?
  drivingLicenseUrl        String?
  idBackImageUrl           String?
  idFrontImageUrl          String?
  autoRenew                Boolean            @default(false)
  darkMode                 Boolean            @default(false)
  hasSeenOnboarding        Boolean            @default(false)
  idVerificationStatus     VerificationStatus @default(NOT_SUBMITTED)
  idVerificationHistory IdVerificationHistory[] // <-- ADD THIS LINE
  nextFreeRideAt           DateTime?
  passwordResetExpires     DateTime?
  passwordResetToken       String?
  preferredLanguage        String             @default("en")
  premiumEndDate           DateTime?
  premiumStartDate         DateTime?
  referralCode             String?            @unique
  profileImageLocked       Boolean            @default(false)
  role                     String             @default("USER")
  userType                 String?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  isEmailVerified          Boolean            @default(false)
  hasUsedFreeTrial         Boolean            @default(false)
  isEligibleForReward      Boolean            @default(false)
  referralsCount           Int                @default(0)
  driverLicenseExpiryDate  DateTime?
  homeAddress              String?
  homeLat                  Float?
  homeLng                  Float?
  workAddress              String?
  workLat                  Float?
  workLng                  Float?
  lastVisits               AdminLastVisit[]
  bookings                 Booking[]
  initiatedInvitations     GroupBookingInvitation[]   @relation("InitiatedInvitations")
  car                      Car?
  chats                    ChatMember[]
  feedbacksGiven           Feedback[]         @relation("UserGivenFeedbacks")
  feedbacksReceived        Feedback[]         @relation("UserReceivedFeedbacks")
  messages                 Message[]
  notifications            Notification[]
  offers                   Offer[]
  promoCodes               PromoCode[]
  referralReceived         Referral?          @relation("ReferralsReceived")
  referralsMade            Referral[]         @relation("ReferralsMade")
  reportsReceived          Report[]           @relation("ReportsReceived")
  reportsMade              Report[]           @relation("ReportsMade")
  rides                    Ride[]             @relation("DriverRides")
  comments                 RideComment[]
  interests                RideInterest[]
  savedRoutes              SavedRoute[]
  scheduledRides           ScheduledRide[]
  badges                   UserBadge[]
  stats                    UserStats?
  sentFriendRequests     Friendship[] @relation("sentFriendRequests")
  receivedFriendRequests Friendship[] @relation("receivedFriendRequests")
  partialRideOffers      PartialRideOffer[]
}

model Car {
  id                 String              @id @default(cuid())
  brand              String
  model              String
  year               Int
  color              String
  plate              String
  licensePhoto       String?
  isVerified         Boolean             @default(false)
  userId             String              @unique
  createdAt          DateTime            @default(now())
  verificationStatus VerificationStatus  @default(NOT_SUBMITTED)
  licenseExpiryDate  DateTime?
  user               User                @relation(fields: [userId], references: [id])
  licenseHistory     CarLicenseHistory[]
  rides              Ride[]

  @@index([isVerified])
}

model CarLicenseHistory {
  id        String             @id @default(cuid())
  photoUrl  String
  status    VerificationStatus @default(PENDING)
  notes     String?
  createdAt DateTime           @default(now())
  carId     String
  car       Car                @relation(fields: [carId], references: [id])
}

model Ride {
  id                  String                    @id @default(cuid())
  driverId            String
  carId               String?
  carInfo             String?
  serviceType         String?
  seats               Int
  price               Float
  receiptPrice        Float?
  renterScreenshotUrl String?
  additionalInfo      String?
  createdAt           DateTime                  @default(now())
  startedAt           DateTime?
  arrivedAt           DateTime?
  time                DateTime
  isTimeArranged      Boolean                   @default(false)
  etaMinutes          Int?
  destination         String
  origin              String
  fromCity            String
  fromSuburb          String
  toCity              String
  toSuburb            String
  fromCityNorm        String?
  fromSuburbNorm      String?
  toCityNorm          String?
  toSuburbNorm        String?
  rideType            String
  isRequest           Boolean                   @default(false)
  isVerified          Boolean                   @default(false)
  isAnonymous         Boolean                   @default(false)
  status              RideStatus                @default(UPCOMING)
  allowedGender       String                    @default("all")
  destinationGeom     Unsupported("geography")?
  originGeom          Unsupported("geography")?
  routeGeom           Unsupported("geography")?
  destinationLat      Float
  destinationLng      Float
  originLat           Float
  originLng           Float
  polyline            String?
  bookings            Booking[]
  chat                Chat?
  feedbacks           Feedback[]
  offers              Offer[]
  reports             Report[]
  car                 Car?                      @relation(fields: [carId], references: [id])
  driver              User                      @relation("DriverRides", fields: [driverId], references: [id])
  comments            RideComment[]
  scheduledRideId     String?
  scheduledRide       ScheduledRide?      @relation(fields: [scheduledRideId], references: [id], onDelete: Cascade)
  interests           RideInterest[]
  groupInvitations    GroupBookingInvitation[]
  partialRideOffers   PartialRideOffer[]
  @@index([status])
  @@index([driverId])
  @@index([time])
  @@index([fromCityNorm, toCityNorm, time])
  @@index([isRequest])
}

model RideInterest {
  id        String   @id @default(cuid())
  rideId    String
  userId    String
  createdAt DateTime @default(now())
  ride      Ride     @relation(fields: [rideId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([rideId, userId])
}

model Booking {
  id         String        @id @default(cuid())
  rideId     String
  userId     String // الراكب الفعلي
  createdAt  DateTime      @default(now())
  status     BookingStatus @default(PENDING)
  invitationId String?
  invitation   GroupBookingInvitation? @relation(fields: [invitationId], references: [id])
  ride       Ride          @relation(fields: [rideId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  chatMember ChatMember?
  @@unique([rideId, userId]) // منع المستخدم من حجز نفس الرحلة مرتين
  @@index([rideId])
  @@index([userId])
  @@index([status])
  @@index([invitationId])
}
model Offer {
  id        String      @id @default(cuid())
  price     Float
  rideId    String
  userId    String
  createdAt DateTime    @default(now())
  status    OfferStatus @default(PENDING)
  ride      Ride        @relation(fields: [rideId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model Chat {
  id        String       @id @default(cuid())
  rideId    String?      @unique
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime     @default(now())
  ride      Ride?        @relation(fields: [rideId], references: [id])
  members   ChatMember[]
  messages  Message[]
}

model ChatMember {
  id         String   @id @default(cuid())
  hasStarted Boolean  @default(false)
  hasEnded   Boolean  @default(false)
  chatId     String
  userId     String
  bookingId  String?  @unique
  createdAt  DateTime @default(now())
  booking    Booking? @relation(fields: [bookingId], references: [id])
  chat       Chat     @relation(fields: [chatId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text")
  chatId    String
  userId    String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  parentId  String?
  parent    Message?  @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Message[] @relation("MessageReplies")
}

model Notification {
  id            String   @id @default(cuid())
  title         String
  message       String
  type          String
  isRead        Boolean  @default(false)
  userId        String
  relatedId     String?
  createdAt     DateTime @default(now())
  bookingStatus String?
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead, type])
}

model Feedback {
  id            String   @id @default(cuid())
  rating        Int
  comment       String?
  rideId        String
  givenById     String
  receivedById  String
  createdAt     DateTime @default(now())
  arrivalOnTime Boolean?
  startOnTime   Boolean?
  givenBy       User     @relation("UserGivenFeedbacks", fields: [givenById], references: [id])
  receivedBy    User     @relation("UserReceivedFeedbacks", fields: [receivedById], references: [id])
  ride          Ride     @relation(fields: [rideId], references: [id])

  @@unique([rideId, givenById])
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  icon        String
  createdAt   DateTime    @default(now())
  description String
  threshold   Float
  users       UserBadge[]
}

model UserBadge {
  id        String    @id @default(cuid())
  userId    String
  badgeId   String
  createdAt DateTime  @default(now())
  earnedAt  DateTime?
  lostAt    DateTime?
  progress  Float     @default(0)
  badge     Badge     @relation(fields: [badgeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, badgeId])
}

model Referral {
  id         String   @id @default(cuid())
  code       String
  referrerId String
  refereeId  String   @unique
  bonusGiven Boolean  @default(false)
  createdAt  DateTime @default(now())
  referee    User     @relation("ReferralsReceived", fields: [refereeId], references: [id])
  referrer   User     @relation("ReferralsMade", fields: [referrerId], references: [id])

  @@unique([referrerId, refereeId])
}

model AppConfig {
  key   String @id
  value String
}

model UserStats {
  id                         String @id @default(cuid())
  userId                     String @unique
  onTimeStarts               Int    @default(0)
  onTimeArrivals             Int    @default(0)
  totalChatMessages          Int    @default(0)
  fastResponses              Int    @default(0)
  totalBookingsToAccept      Int    @default(0)
  acceptedBookings           Int    @default(0)
  totalCancellations         Int    @default(0)
  totalRidesAsDriver         Int    @default(0)
  totalRidesAsPassenger      Int    @default(0)
  completedFreeRidesAsDriver Int    @default(0)
  fastResponseOpportunities  Int    @default(0)
  fastResponseSuccesses      Int    @default(0)
  user                       User   @relation(fields: [userId], references: [id])
}

model PromoCode {
  id        String   @id @default(cuid())
  code      String   @unique
  userId    String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model IdVerificationHistory {
  id              String   @id @default(cuid())
  userId          String
  idFrontImageUrl String
  idBackImageUrl  String
  archivedAt      DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Report {
  id             String       @id @default(cuid())
  reason         String
  comment        String?
  status         ReportStatus @default(PENDING)
  rideId         String
  reporterId     String
  reportedUserId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  ride           Ride         @relation(fields: [rideId], references: [id])

  @@index([rideId])
  @@index([reporterId])
  @@index([reportedUserId])
}

model AdminLastVisit {
  id            String   @id @default(cuid())
  adminId       String
  resource      String
  lastVisitedAt DateTime @default(now())
  admin         User     @relation(fields: [adminId], references: [id])

  @@unique([adminId, resource])
}

// NEW, CORRECTED MODEL
model SavedRoute {
  id                 String    @id @default(cuid())
  name               String
  icon               String?   // <-- تمت إضافته
  polyline           String?
  originAddress      String
  originLat          Float
  originLng          Float
  originCity         String?   // <-- تمت إضافته
  originSuburb       String?   // <-- تمت إضافته
  destinationAddress String
  destinationLat     Float
  destinationLng     Float
  destinationCity    String?   // <-- تمت إضافته
  destinationSuburb  String?   // <-- تمت إضافته
  userId             String
  createdAt          DateTime  @default(now())
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ScheduledRide {
  id             String   @id @default(cuid())
  origin         String
  destination    String
  fromCity       String
  toCity         String
  originLat      Float
  originLng      Float
  destinationLat Float
  destinationLng Float
  seats          Int
  price          Float
  scheduleTime   String
  daysOfWeek     Int[]
  isActive       Boolean  @default(true)
  driverId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fromSuburb     String?
  toSuburb       String?
  driver         User     @relation(fields: [driverId], references: [id], onDelete: Cascade)
  createdRides   Ride[]

  @@index([driverId, isActive])
}

model RideComment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  rideId    String
  userId    String
  parentId  String?
  parent    RideComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   RideComment[] @relation("CommentReplies")
  ride      Ride          @relation(fields: [rideId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([rideId, createdAt])
}

model GroupBookingInvitation {
  id          String    @id @default(cuid())
  rideId      String
  initiatorId String // المستخدم الذي بدأ الدعوة
  seats       Int // إجمالي عدد المقاعد المطلوبة
  expiresAt   DateTime // وقت انتهاء صلاحية الدعوة
  status      String    @default("PENDING") // PENDING, CONFIRMED, EXPIRED

  // العلاقة العكسية مع الحجوزات الفردية
  bookings Booking[]

  ride      Ride @relation(fields: [rideId], references: [id])
  initiator User @relation("InitiatedInvitations", fields: [initiatorId], references: [id])

  @@index([rideId])
  @@index([initiatorId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Friendship {
  id           String            @id @default(cuid())
  requesterId  String
  addresseeId  String
  status       FriendshipStatus  @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  requester    User              @relation("sentFriendRequests", fields: [requesterId], references: [id])
  addressee    User              @relation("receivedFriendRequests", fields: [addresseeId], references: [id])

  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
}

model PartialRideOffer {
  id              String   @id @default(cuid())
  rideId          String   // The original ride being offered
  passengerId     String   // The user making the offer
  offeredPrice    Float    // The dynamically calculated price
  status          String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  
  // Passenger's desired start and end points
  passengerOriginLat      Float
  passengerOriginLng      Float
  passengerDestinationLat Float
  passengerDestinationLng Float
  passengerOriginAddress  String
  passengerDestinationAddress String

  createdAt       DateTime @default(now())
  
  ride            Ride     @relation(fields: [rideId], references: [id])
  passenger       User     @relation(fields: [passengerId], references: [id])

  @@index([rideId])
  @@index([passengerId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum RideStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
  GROUP_PENDING
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum VerificationStatus {
  NOT_SUBMITTED
  PENDING
  APPROVED
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}
